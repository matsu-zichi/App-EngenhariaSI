<!DOCTYPE html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <title>EngenhariaSi</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script type="module">

      if(document.getElementById("txtLat")){
        var nLat = parseFloat(document.getElementById("txtLat").value)
        var nAlt = parseFloat(document.getElementById("txtAlt").value)
      } else {
        var nLat = parseFloat(0)
        var nAlt = parseFloat(0)
      }
      function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: nLat, lng: nAlt },
        zoom: 13,
        mapTypeControl: false,
        });
        const input = document.getElementById("lembrete_endereco");
        const options = {
        fields: ["formatted_address", "geometry", "name"],
        strictBounds: false,
        types: ["establishment"],
        };

        map.controls[google.maps.ControlPosition.TOP_LEFT];

        const autocomplete = new google.maps.places.Autocomplete(input, options);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo("bounds", map);

        var marker = new google.maps.Marker({map});
        if(document.getElementById("txtLat")){
          marker = new google.maps.Marker({
            map,
            position: {lat: nLat, lng: nAlt}
          });
        } else {
          marker = new google.maps.Marker({
            map,
            anchorPoint: new google.maps.Point(0, -29),
          });
        }

        autocomplete.addListener("place_changed", () => {
        
        marker.setVisible(false);

        const place = autocomplete.getPlace();

        if (!place.geometry || !place.geometry.location) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert("No details available for input: '" + place.name + "'");
          return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
          map.setZoom(20);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(20);
        }
        
        document.getElementById("lembrete_latalt").value  = place.geometry.location.lat() + ";" + place.geometry.location.lng()

        marker.setPosition(place.geometry.location);
        marker.setVisible(true);
        
        });

      }

      window.initMap = initMap;

	</script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD7I5Uw5wBw64LP_dGAYoKJgtJ2eO30xX8&callback=initMap&libraries=places&v=weekly" defer></script>


  </head>

  <body>
    <%= render 'home/header' %>
    <% if notice %>
      <%= render "layouts/alerts"%>
    <% end %>
    <p class="alert"><%= alert %></p>
    <div class="container">
      <%= yield %>
    </div>
  </body>
</html>
